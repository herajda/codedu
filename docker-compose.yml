version: "3.8"

services:
  proxy:
    image: nginx:1.27-alpine
    depends_on:
      - frontend
      - backend
    ports:
      - "61189:80"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf:ro,z
    networks: [appnet]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      ORIGIN: http://localhost:61189
      PUBLIC_API_BASE: /api
      SSR_API_BASE: http://backend:8080
    env_file:
      - .env
    depends_on:
      - backend
    volumes:
      - ./.env:/app/.env:ro
    networks: [appnet]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      PORT: "8080"
      DATABASE_URL: postgres://codedu_user:supersecret@db:5432/codedu_db?sslmode=disable
      DB_HOST: db
      DB_PORT: "5432"
      DB_USER: codedu_user
      DB_PASSWORD: supersecret
      DB_NAME: codedu_db
      DB_SSLMODE: disable
      EXECUTION_ROOT: /sandbox
      PYTHON_RUNNER_IMAGE: python:3.11
      DOCKER_HOST: tcp://docker-engine:2375
      DOCKER_TLS_CERTDIR: ""
      DOCKER_USER: "65534:65534"
      DOCKER_CPUS: "0.5"
      DOCKER_MEMORY: "256m"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_started
      docker-engine:
        condition: service_started
    volumes:
      - runner_shared:/sandbox:z
      - ./.env:/app/.env:ro
    networks: [appnet]

  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: codedu_user
      POSTGRES_PASSWORD: supersecret
      POSTGRES_DB: codedu_db
    volumes:
      - db_data:/var/lib/postgresql/data
    networks: [appnet]

  docker-engine:
    image: docker:27-dind
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: ""
    # Use the image's default entrypoint (dockerd-entrypoint.sh) so it can
    # properly prepare cgroups for DinD on cgroup v2 hosts.
    command: ["--host=tcp://0.0.0.0:2375","--storage-driver=overlay2","--iptables=false","--ip-masq=false","--log-level=error"]
    volumes:
      - docker_data:/var/lib/docker
      - runner_shared:/sandbox:z
    networks: [appnet]


volumes:
  db_data:
  docker_data:
  runner_shared:

networks:
  appnet:
    driver: bridge
